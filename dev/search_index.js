var documenterSearchIndex = {"docs":
[{"location":"usage/#Example-usage","page":"Example usage","title":"Example usage","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"To load the package, type the following in the REPL","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"using BifrostTools","category":"page"},{"location":"usage/#Using-BifrostExperiment","page":"Example usage","title":"Using BifrostExperiment","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"In this example, we look at the simulation cb24oi. we start with defining the part to the simulation directory and the name of the simulation.","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"expdir = \"/mn/stornext/d21/RoCS/matsc/3d/run/cb24oi/\"\nexpname = \"cb24oi\"","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"These variables can be passed to the BifrostExperiment structure, which creates an instance that lets us access the mesh file, snapshot numbers, and so on.","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"xp = BifrostExperiment(expname,expdir)\n\n# Mesh file that holds grid info etc.\nmesh = xp.mesh\n\nx = mesh.x\ny = mesh.y\nz = mesh.z\n\n# vector with snap numbers\nsnaps = xp.snaps","category":"page"},{"location":"usage/#Reading-data-from-the-simulation-with-get_var","page":"Example usage","title":"Reading data from the simulation with get_var","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"Reading data from the snapshot or aux files is handled through the get_var function. Due to Julia's multiple dispatch functionality, there are several ways to call the get_var function, but we recommend using the following function to simplify the calling signature:","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"get_var(\n    xp::BifrostExperiment,\n    snap::Union{<:Integer, AbstractVector{<:Integer}},\n    variable::String,\n    args...\n    ;\n    kwargs...\n)","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"This funciton loads a variable from one or multiple snapshots of xp. If multiple snapshots are loaded, the variable is returned as a Vector of snapshots. The available variables are","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"The primary variables:","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"\"r\":  density\n\"px\": x-component of momentum\n\"py\": y-component of momentum\n\"pz\": z-component of momentum\n\"e\":  energy","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"if params[\"do_mhd\"] is true in the params file, we also have the magnetic field:","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"\"bx\": x-component of magnetic field\n\"by\": y-component of magnetic field\n\"bz\": z-component of magnetic field","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"and auxilliary variables (variables in params[\"aux\"]):","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"\"p\": pressure\n\"tg\": gas temperature\nQ terms","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"The following are optional keyword-arguments","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"units::String: Converts variables to \"si\" or \"cgs\" units. units=\"si\" or units=\"cgs\".\ndestagger::Bool: Performs 5th-order interpolation to center the variable, and should only be used when reading variables that are staggered, (e.g. velocity or magnetic field). The function uses the default direction (destaggeroperation) associated with the variable unless otherwise stated by the destaggeroperation keyword.\ndestaggeroperation::String: Determines which direction to destagger the variable. This is by default handled automatically by the destaggeroperation dictionary. \nrotate_about_x::String: Rotate coordinate system to the normal \"right hand system\" with z-axis pointing upwards by passing rotate_about=\"x\"\nslicex::AbstractVector{<:Integer}: Load a slice or slices in x-axis. Give e.g. slicex=[32, 410] or slicex=40:90\nslicey::AbstractVector{<:Integer}: Load a slice or slices in y-axis\nslicez::AbstractVector{<:Integer}: Load a slice or slices in z-axis\nsqueeze::Bool: Removes singleton dimensions (dimensions with length 1)","category":"page"},{"location":"usage/#Loading-a-single-snapshot","page":"Example usage","title":"Loading a single snapshot","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"With xp as defined above, we define a snapshot that we want to investigate. When loading the full cube in code units, the variables are memory mapped, making them fast to load.","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"snap = 700\n# Load some quantities for the full cube in code units\npressure = get_var(xp, snap, \"p\")\ndensity = get_var(xp, snap, \"r\")\ntemperature = get_var(xp, snap, \"tg\")","category":"page"},{"location":"usage/#Converting-units","page":"Example usage","title":"Converting units","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"If we want si or cgs units:","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"snap = 700\n# Load some quantities for the full cube in si or cgs units\npressure = get_var(xp, snap, \"p\", units=\"cgs\")\nrho = get_var(xp, snap, \"r\", units=\"si\")\n# The temperature is written in Kelvin from before\ntemperature = get_var(xp, snap, \"tg\")","category":"page"},{"location":"usage/#Reading-a-slice-of-the-full-cube","page":"Example usage","title":"Reading a slice of the full cube","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"If we're only interested in a small part of the cube, we can use the slicing functionality of get_var. Use the squeeze keyword to drop singleton dimensions.","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"We can load only the surface","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"idz = argmin(abs.(mesh.z))\n\nrho = get_var(xp, snap, \"r\"; units=\"si\", slicez=[idz], squeeze=true)\ntemperature = get_var(xp, snap, \"tg\"; units=\"si\", slicez=[idz], squeeze=true)","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"or a smaller cube around the surface","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"rho = get_var(xp, snap, \"r\",\n     units=\"si\", slicex=100:200, slicey=400:500, slicez=[idz-20:idz+20])\ntemperature = get_var(xp, snap, \"tg\",\n     units=\"si\", slicex=100:200, slicey=400:500, slicez=[idz-20:idz+20])","category":"page"},{"location":"usage/#Interpolating-staggered-variables-to-the-grid-center","page":"Example usage","title":"Interpolating staggered variables to the grid center","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"Interpolating staggered variables (destaggering) can be handled through get_var. This is recommended because get_var can determine the interpolation direction, and if you want to slice a variable, it takes care of the correct ordering of interpolating and slicing. ","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"# Read and destagger vertical momentum in si units\npz = get_var(xp, snap, \"pz\", units=\"si\", destagger=true)","category":"page"},{"location":"usage/#Reading-multiple-snapshots","page":"Example usage","title":"Reading multiple snapshots","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"If you want the time evolution ","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"If you want to get the time evolution of a quantity, you can simply pass a vector of snapshots. The get_var function uses Julia's threads functionality to read multiple snapshots in parallel. ","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"snaps = 100:150\n\nrho = get_var(xp, snaps, \"r\", units=\"si\", slicez=[idz], squeeze=true)\n# Calculate vertical velocity\nvz = get_var(xp, snaps, \"pz\", units=\"si\", slicez=[idz], squeeze=true) ./ rho","category":"page"},{"location":"usage/#Rotating-grid","page":"Example usage","title":"Rotating grid","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"Rotate about the x-axis to get vector quantities on a z-axis that points upwards.","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"# When we rotate about the x-axis, this is what happens to the grid\nz = -mesh.z\ny = -mesh.y\n\n# Load x-component of B-field and rotate about x-axis\nbx = get_var(xp, isnap, \"bx\", units=\"si\", destagger=true, rotate_about=\"x\")","category":"page"},{"location":"usage/#Loading-the-simulation-parameters-with-read_params","page":"Example usage","title":"Loading the simulation parameters with read_params","text":"","category":"section"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"The read_params function reads the params file. It can be called by giving the full filename, like the following","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"snap = 500\nparams_file = joinpath(expdir,string(expname,\"_\",snap,\".idl\"))\nparams = read_params(params_file)","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"or","category":"page"},{"location":"usage/","page":"Example usage","title":"Example usage","text":"read_params(expname,snap,expdir)","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"BifrostTools.jl is not published yet, and therefore not available in the Julia registry. Therefore, this package need to be installed locally.","category":"page"},{"location":"install/#Recipe","page":"Installation","title":"Recipe","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Clone the repository locally: git clone git@github.com:ITA-Solar/BifrostTools.jl.git\nMove to the repo and open the REPL by typing julia in your terminal\n] add . installs the package from inside the repository (alternatively ] add PATH/TO/BifrostTools.jl)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Now you can use BifrostTools.jl in Julia! > using BifrostTools","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BifrostTools","category":"page"},{"location":"#BifrostTools","page":"Home","title":"BifrostTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BifrostTools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BifrostTools]","category":"page"},{"location":"#BifrostTools.cgs_to_SI_conversion_factors","page":"Home","title":"BifrostTools.cgs_to_SI_conversion_factors","text":"cgs_to_SI_conversion_factors\n\nFactors for converting some physical quantities from cgs-units to SI-units.\n\n\n\n\n\n","category":"constant"},{"location":"#BifrostTools.primary_vars","page":"Home","title":"BifrostTools.primary_vars","text":"primary_vars\n\nThe primary variables and their order of storage for primary variables in a  Bifrost .snap binary file.\n\n\n\n\n\n","category":"constant"},{"location":"#BifrostTools.BifrostMesh","page":"Home","title":"BifrostTools.BifrostMesh","text":"    BifrostMesh\n\nStores Bifrost grid information in struct\n\n\n\n\n\n","category":"type"},{"location":"#BifrostTools.addtokwargs-Tuple{}","page":"Home","title":"BifrostTools.addtokwargs","text":"addtokwargs(;kwargs...)\n\nAdd keyword-arguments to your Base.Pairs of kwargs.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.cgs_to_SI-Tuple{AbstractArray, String}","page":"Home","title":"BifrostTools.cgs_to_SI","text":"cgs_to_SI(\n    data    ::AbstractArray,\n    variable::String,\n    params  ::Dict{String,String},\n)\n\nConvert the data from cgs-units to SI-units.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.change_snap_resolution-Tuple{BifrostExperiment, Integer, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Interpolations.BoundaryCondition}","page":"Home","title":"BifrostTools.change_snap_resolution","text":"change_snap_resolution(\n    xp      ::BifrostExperiment,\n    isnap   ::Integer,\n    new_x   ::Vector{<:Real},\n    new_y   ::Vector{<:Real},\n    new_z   ::Vector{<:Real},\n    itp_bc  ::Interpolations.BoundaryCondition,\n    ;\n    filename::String=\"out.snap\"\n    )\n\nWrites a new snapfile with a new resolution, according to new axes, given as arguments. To fill the values of the new snap this function uses gridded linear interpolation (from Interpolations.jl) of the old snap, given by the BifrostExperiment and isnap argument.\n\nBoundary conditions could be either Throw(), Flat(), Line(), Periodic() or Reflect().\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.code_to_SI-Tuple{AbstractArray, String, Dict{String, String}}","page":"Home","title":"BifrostTools.code_to_SI","text":"code_to_SI(\n    data    ::AbstractArray,\n    variable::String,\n    params  ::Dict{String,String},\n)\n\nConvert the data from code units to SI units.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.code_to_cgs-Tuple{AbstractArray, String, Dict{String, String}}","page":"Home","title":"BifrostTools.code_to_cgs","text":"code_to_cgs(\n    data    ::AbstractArray,\n    variable::String,\n    params  ::Dict{String,String},\n)\n\nConvert the data from code-units to cgs-units.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.convert_timeunits-Tuple{Union{AbstractFloat, AbstractArray}, Dict{String, String}}","page":"Home","title":"BifrostTools.convert_timeunits","text":"convert_timeunits!(\nt     ::AbstractArray,\nparams::Dict{String,String}\n)     ::Float64\n\nConverts snapshot time to seconds\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.convert_units-Tuple{AbstractArray, String, Dict{String, String}, String}","page":"Home","title":"BifrostTools.convert_units","text":"convert_units(\n    data    ::AbstractArray,\n    variable::String,\n    params  ::Dict{String,String},\n    units   ::String,\n    )\n\nConvert the data from code units to someting else.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.duplicate_xz_plane-Tuple{BifrostExperiment, Integer, Int64}","page":"Home","title":"BifrostTools.duplicate_xz_plane","text":"duplicate_xz_plane(\n    xp      ::BifrostExperiment,\n    isnap   ::Integer,\n    ny      ::Integer,\n    ;\n    filename::String=\"out.snap\"\n    )\n\nDuplicates the xz-plane into ny gridpoints in the y-axis. Used for creating 3D snapshots from a 2D xy-snapshot. \n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.dxdn-Union{Tuple{T}, Tuple{Array{T, 3}, Vector{T}}, Tuple{Array{T, 3}, Vector{T}, Bool}, Tuple{Array{T, 3}, Vector{T}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.dxdn","text":"dxdn(\n\tarr::Array{T,3},\n\tdz::Vector{T}, \n\tperiodic::Bool=false, \n\torder::Int=6\n\t)\n\nComputes the spatial derivative in the x-direction of every entry in arr  shifted a half grid point downwards. Defaults to the 6th order accurate Bifrost  derivative with order=6, optional 2nd order accurate derivative with keyword  order=2\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.dxup-Union{Tuple{T}, Tuple{Array{T, 3}, Vector{T}}, Tuple{Array{T, 3}, Vector{T}, Bool}, Tuple{Array{T, 3}, Vector{T}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.dxup","text":"dxup(\n\tarr::Array{T,3},\n\tdz::Vector{T}, \n\tperiodic::Bool=false, \n\torder::Int=6\n\t)\n\nComputes the spatial derivative in the x-direction of every entry in arr  shifted a half grid point upwards. Defaults to the 6th order accurate Bifrost  derivative with order=6, optional 2nd order accurate derivative with keyword  order=2\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.dydn-Union{Tuple{T}, Tuple{Array{T, 3}, Vector{T}}, Tuple{Array{T, 3}, Vector{T}, Bool}, Tuple{Array{T, 3}, Vector{T}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.dydn","text":"dydn(\n\tarr::Array{T,3},\n\tdz::Vector{T}, \n\tperiodic::Bool=false, \n\torder::Int=6\n\t)\n\nComputes the spatial derivative in the y-direction of every entry in arr  shifted a half grid point downwards. Defaults to the 6th order accurate Bifrost  derivative with order=6, optional 2nd order accurate derivative with keyword  order=2\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.dyup-Union{Tuple{T}, Tuple{Array{T, 3}, Vector{T}}, Tuple{Array{T, 3}, Vector{T}, Bool}, Tuple{Array{T, 3}, Vector{T}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.dyup","text":"dyup(\n\tarr::Array{T,3},\n\tdz::Vector{T}, \n\tperiodic::Bool=false, \n\torder::Int=6\n\t)\n\nComputes the spatial derivative in the y-direction of every entry in arr  shifted a half grid point upwards. Defaults to the 6th order accurate Bifrost  derivative with order=6, optional 2nd order accurate derivative with keyword  order=2\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.dzdn-Union{Tuple{T}, Tuple{Array{T, 3}, Vector{T}}, Tuple{Array{T, 3}, Vector{T}, Bool}, Tuple{Array{T, 3}, Vector{T}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.dzdn","text":"dzdn(\n\tarr::Array{T,3},\n\tdz::Vector{T}, \n\tperiodic::Bool=false, \n\torder::Int=6\n\t)\n\nComputes the spatial derivative in the z-direction of every entry in arr  shifted a half grid point downwards. Defaults to the 6th order accurate Bifrost  derivative with order=6, optional 2nd order accurate derivative with keyword  order=2\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.dzup-Union{Tuple{T}, Tuple{Array{T, 3}, Vector{T}}, Tuple{Array{T, 3}, Vector{T}, Bool}, Tuple{Array{T, 3}, Vector{T}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.dzup","text":"dzup(\n\tarr::Array{T,3},\n\tdz::Vector{T}, \n\tperiodic::Bool=false, \n\torder::Int=6\n\t)\n\nComputes the spatial derivative in the z-direction of every entry in arr  shifted a half grid point upwards. Defaults to the 6th order accurate Bifrost derivative with order=6, optional 2nd order accurate derivative with keyword  order=2\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_and_destagger_var-Tuple{String, Dict{String, String}, Integer}","page":"Home","title":"BifrostTools.get_and_destagger_var","text":"function get_and_destagger_var(expname::String,\n    filename::String,\n    params::Dict{String,String},\n    varnr::Integer,\n    ;\n    destaggeroperation::Function,\n    units::String=\"none\",\n    periodic::Bool=false,\n    order::Int=6,\n    slicex::AbstractVector{<:Integer}=Int[],\n    slicey::AbstractVector{<:Integer}=Int[],\n    slicez::AbstractVector{<:Integer}=Int[],\n    kwargs...\n    )\n\nFunction to load a staggered variable and interpolate it to cell center. The staggered variables that typically need to be interpolated are the velocity and magnetic field components. Normally you need to use destaggeroperation=zup for vz and bz with periodic=false, and destaggeroperation=xup for vx and bx with periodic=true (same for y direction).\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_aux","page":"Home","title":"BifrostTools.get_aux","text":"get_aux(\n    file_name::String,\n    params   ::Dict{String,String}\n)\n\nReads Bifrost *.aux binary file using memory-mapping. The returned auxdata array will have dimensions (mx,my,mz,nvars) where nvars is the number of aux-variables. Assumes single floating point precision by default.\n\n\n\n\n\n","category":"function"},{"location":"#BifrostTools.get_basename-Tuple{String, Union{Integer, AbstractVector{<:Integer}}, String}","page":"Home","title":"BifrostTools.get_basename","text":"get_basename(\n    expname ::String,\n    snap    ::Union{<:Integer, AbstractVector{<:Integer}},\n    expdir  ::String,\n    )\n\nReturn the basename of snapshots in the experiment expname, located in the  directory expdir. Also return the filename (withou file extension) of the  first snapshot of the experiment.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_electron_density-Tuple{BifrostExperiment, Union{Integer, AbstractVector{<:Integer}}}","page":"Home","title":"BifrostTools.get_electron_density","text":"function get_electron_density(\n    xp::BifrostExperiment,\n    snap::Integer,\n    kwargs...)\n\nFunction to calculate the electron density from a snapshot snap. Supports slicing. Gas density rho and internal energy e are optional arguments and can be passed (but they MUST be in cgs units). If these quantities already  exist, passing them will speed up the calculation of electron density.\n\nkwargs:     units::String=\"si\",     slicex::AbstractVector{<:Integer}=Int[],     slicey::AbstractVector{<:Integer}=Int[],     slicez::AbstractVector{<:Integer}=Int[],     rho::Array{AbstractFloat,3}=Float32[;;;],     e::Array{AbstractFloat,3}=Float32[;;;],     tabfile::String=\"tabparam.in\"\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_electron_density-Union{Tuple{T}, Tuple{String, Integer, String}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.get_electron_density","text":"function get_electron_density(\n    expname::String,\n    snap::Integer,\n    expdir::String;\n    units::String=\"si\",\n    slicex::AbstractVector{<:Integer}=Int[],\n    slicey::AbstractVector{<:Integer}=Int[],\n    slicez::AbstractVector{<:Integer}=Int[],\n    rho::Array{T,3}=Float32[;;;],\n    e::Array{T,3}=Float32[;;;],\n    tabfile::String=\"tabparam.in\"\n    ) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_numvars-Tuple{Dict{String, String}}","page":"Home","title":"BifrostTools.get_numvars","text":"get_numvars(\n    params::Dict{String,String},\n)\n\nReturns number of primary variables and number of auxiliary variables, given the snapshot-parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_snap","page":"Home","title":"BifrostTools.get_snap","text":"get_snap(\n    expname::String,\n    snap   ::Int,\n    expdir ::String,\n    )\n\nReads Bifrost *.snap binary file as an Array in dimension: (mx,my,mz,nvar). Takes experiment name, experiment directory, and snap number as arguments. Returns snapdata (the data) and params (the snap parameters). Assumes single floating point precision by default.\n\nVariables of snapdata:\n\n    snapdata[:,:,:,1] : r, density\n    snapdata[:,:,:,2] : px, x-component of momentum \n    snapdata[:,:,:,3] : py, y-component of momentum \n    snapdata[:,:,:,4] : pz, z-component of momentum \n    snapdata[:,:,:,5] : e, energy\n\n    if params[\"do_mhd\"] == 1 # numvars = 8, otherwise numvars = 5\n        snapdata[:,:,:,6] : bx, x-component of magnetic field \n        snapdata[:,:,:,7] : by, y-component of magnetic field \n        snapdata[:,:,:,8] : bz, z-component of magnetic field\n\nWarning:     variables in code units.ts\n\n\n\n\n\n","category":"function"},{"location":"#BifrostTools.get_snap-2","page":"Home","title":"BifrostTools.get_snap","text":"get_snap(\n    file_name::String,\n    params   ::Dict{String,String}\n    )\n\n\n\n\n\n","category":"function"},{"location":"#BifrostTools.get_snap_numbers","page":"Home","title":"BifrostTools.get_snap_numbers","text":"get_snap_numbers(\n    expdir::String, \n    expname::String=\"none\"\n    ;\n    findall::Bool=false, \n    filenames::Vector{String}=String[]\n    )\n\nFinds all files in the format 'expnameXXX.snap' in the experiment directory `expdir, and returns a vector of the snapshots XXX. Ifexpname` is not given, is is assumed that the directory of the simulation matches the experiment name.\n\n\n\n\n\n","category":"function"},{"location":"#BifrostTools.get_snapsize-Tuple{BifrostMesh, AbstractVector{<:Integer}, AbstractVector{<:Integer}, AbstractVector{<:Integer}}","page":"Home","title":"BifrostTools.get_snapsize","text":"get_snapsize(\n    mesh::BifrostMesh,\n    slicex::AbstractVector{<:Integer},\n    slicey::AbstractVector{<:Integer},\n    slicez::AbstractVector{<:Integer}\n)\n\nReturns snapsize (mx, my, mz) given a Bifrost-mesh.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_snapsize-Tuple{BifrostMesh}","page":"Home","title":"BifrostTools.get_snapsize","text":"get_snapsize(\n    mesh::BifrostMesh,\n)\n\nReturns snapsize (mx, my, mz) given a Bifrost-mesh.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_snapsize-Tuple{Dict{String, String}, AbstractVector{<:Integer}, AbstractVector{<:Integer}, AbstractVector{<:Integer}}","page":"Home","title":"BifrostTools.get_snapsize","text":"get_snapsize(\n    params::Dict{String,String},\n    slicex::AbstractVector{<:Integer},\n    slicey::AbstractVector{<:Integer},\n    slicez::AbstractVector{<:Integer}\n)\n\nReturns snapsize (mx, my, mz) given the snapshot-parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_snapsize-Tuple{Dict{String, String}}","page":"Home","title":"BifrostTools.get_snapsize","text":"get_snapsize(\n    params::Dict{String,String},\n)\n\nReturns snapsize (mx, my, mz) given the snapshot-parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_snapsize_and_numvars-Tuple{Dict{String, String}}","page":"Home","title":"BifrostTools.get_snapsize_and_numvars","text":"get_snapsize_and_numvars(\n    params::Dict{String,String},\n)\n\nReturns snapsize (mx, my, mz), number of primary variables and number of auxiliary variables, given the snapshot-parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_var-Tuple{BifrostExperiment, Union{Integer, AbstractVector{<:Integer}}, String, Vararg{Any}}","page":"Home","title":"BifrostTools.get_var","text":"get_var(\n    xp::BifrostExperiment,\n    snap::Union{<:Integer, AbstractVector{<:Integer}},\n    variable::String,\n    args...\n    ;\n    kwargs...\n    )\n\nLoad a variable from one or multiple snapshots of xp.\n\nAvailable variables\n\nThe primary variables:\n\n\"r\":  density\n\"px\": x-component of momentum\n\"py\": y-component of momentum\n\"pz\": z-component of momentum\n\"e\":  energy\n\nif params[\"do_mhd\"] == true\n\n\"bx\": x-component of magnetic field\n\"by\": y-component of magnetic field\n\"bz\": z-component of magnetic field\n\nauxilliary variables (variables in params[\"aux\"]):\n\n\"p\": pressure\n\"tg\": gas temperature   ...\n\nOptional keyword-arguments\n\nConverts variables to \"si\" or \"cgs\" units: units=\"si\" or units=\"cgs\".\n\nTo load a slice of the variable, give e.g. slicex=[32, 410] or slicey=40:90\n\nExample usage:\n\nexp_name = \"cb24oi\"\nexp_dir = \"/mn/stornext/d21/RoCS/matsc/3d/run/cb24oi\"\nsnap = 700\n\nxp = BifrostExperiment(expname, expdir)\n\n# Load pressude for the full cube in si units\npressure = get_var(xp, snap, \"p\"; units=\"si\")\n\n# Load gas density in a slize along the xy-plane in cgs units\nrho = get_var(xp, snap, \"r\"; units=\"cgs\", slicez=[100])\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_var-Tuple{String, Dict{String, String}, Integer}","page":"Home","title":"BifrostTools.get_var","text":"get_var(\n    filename       ::String,\n    params         ::Dict{String,String},\n    varnr          ::Integer,\n    precision      ::DataType=Float32;\n    slicex         ::AbstractVector{<:Integer}=Int[],\n    slicey         ::AbstractVector{<:Integer}=Int[],\n    slicez         ::AbstractVector{<:Integer}=Int[]\n    )\n\nLoad variable nr. varnr from filename. The variable could be either  primary or auxiliary. Slicing the snapshot is optional. Assumes single  precision snapshot by default.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_var-Tuple{String, Union{Integer, AbstractVector{<:Integer}}, String, String, Vararg{Any}}","page":"Home","title":"BifrostTools.get_var","text":"get_var(\n    expname ::String,\n    snap    ::Union{<:Integer, AbstractVector{<:Integer}},\n    expdir  ::String,\n    variable::String,\n    args...\n    ;\n    kwargs...\n)\n\nLoad a variable from one or multiple snapshots of a Bifrost experiment with  experiment directory expdir and experiment name expname.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_variable_offset_in_file-Tuple{DataType, Tuple{Integer, Integer, Integer}, Integer}","page":"Home","title":"BifrostTools.get_variable_offset_in_file","text":"get_variable_offset_in_file(\n    precision::DataType,\n    snapsize::Tuple{Integer, Integer, Integer},\n    varnr   ::Integer\n    )\n\nGiven the precision and size of a snapshot, find the offset for reading the variable with index varnr directly from file. Offset given in number of bytes.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.get_varnr_and_file_extension-Tuple{Dict{String, String}, String}","page":"Home","title":"BifrostTools.get_varnr_and_file_extension","text":"get_varnr_and_file_ext(\n    params::Dict{String,String},\n    variable::String\n    )\n\nGiven the snapshot params and desired variable, return its index in the binary file, as well as the extension of this file. (Either \".aux\" or \".snap\").\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.read_params-Tuple{String, Integer, String}","page":"Home","title":"BifrostTools.read_params","text":"read_params(expname::String, snap::Integer, expdir::String)\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.read_params-Tuple{String}","page":"Home","title":"BifrostTools.read_params","text":"read_params(file_name::String)\n\nReads and returns parameters params of a Bifrost simulation snapshot given  the path file_name to the simulation snapshot. The input file should have the format 'name_xxx.idl' where 'name' is the simulation name and 'xxx' is the  snapshot number\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.rotate-Tuple{AbstractArray, String, String}","page":"Home","title":"BifrostTools.rotate","text":"rotate(\n    data         ::AbstractArray,\n    variable     ::String,\n    rotation_axis::String,\n    )\n\nRotate the data about an rotation_axis.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.squeeze-Tuple{AbstractArray}","page":"Home","title":"BifrostTools.squeeze","text":"function squeeze(a::AbstractArray)\n\nDrop singleton dimensions of array a\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.xdn-Union{Tuple{Array{T, 3}}, Tuple{T}, Tuple{Array{T, 3}, Bool}, Tuple{Array{T, 3}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.xdn","text":"function xdn(\n    arr::Array{T,3},\n    periodic::Bool=true,\n    order::Int=6\n) where {T<:AbstractFloat}\n\nStagger operation on arr by a 5th order polynomial interpolation,  shifting the variable half a grid point downwards in the x-direction\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.xup-Union{Tuple{Array{T, 3}}, Tuple{T}, Tuple{Array{T, 3}, Bool}, Tuple{Array{T, 3}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.xup","text":"function xup(\n    arr::Array{T,3},\n    periodic::Bool=true,\n    order::Int=6\n) where {T<:AbstractFloat}\n\nStagger operation on arr by a 5th order polynomial interpolation,  shifting the variable half a grid point upwards in the x-direction\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.xupyup-Tuple{Any, Vararg{Any}}","page":"Home","title":"BifrostTools.xupyup","text":"xupyup(data, args...)\n\nFor destagering variables at cell edges, in particular the z-axis.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.ydn-Union{Tuple{Array{T, 3}}, Tuple{T}, Tuple{Array{T, 3}, Bool}, Tuple{Array{T, 3}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.ydn","text":"function ydn(\n    arr::Array{T,3},\n    periodic::Bool=true,\n    order::Int=6\n) where {T<:AbstractFloat}\n\nStagger operation on arr by a 5th order polynomial interpolation,  shifting the variable half a grid point downwards in the y-direction\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.yup-Union{Tuple{Array{T, 3}}, Tuple{T}, Tuple{Array{T, 3}, Bool}, Tuple{Array{T, 3}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.yup","text":"function yup(\n    arr::Array{T,3},\n    periodic::Bool=true,\n    order::Int=6\n) where {T<:AbstractFloat}\n\nStagger operation on arr by a 5th order polynomial interpolation,  shifting the variable half a grid point upwards in the y-direction\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.yupzup-Tuple{Any, Vararg{Any}}","page":"Home","title":"BifrostTools.yupzup","text":"yupzup(data, args...)\n\nFor destagering variables at cell edges, in particular the x-axis.\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.zdn-Union{Tuple{Array{T, 3}}, Tuple{T}, Tuple{Array{T, 3}, Bool}, Tuple{Array{T, 3}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.zdn","text":"function zdn(\n    arr::Array{T,3},\n    periodic::Bool=true,\n    order::Int=6\n) where {T<:AbstractFloat}\n\nStagger operation on arr by a 5th order polynomial interpolation,  shifting the variable half a grid point downwards in the z-direction\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.zup-Union{Tuple{Array{T, 3}}, Tuple{T}, Tuple{Array{T, 3}, Bool}, Tuple{Array{T, 3}, Bool, Int64}} where T<:AbstractFloat","page":"Home","title":"BifrostTools.zup","text":"function zup(\n    arr::Array{T,3},\n    periodic::Bool=true,\n    order::Int=6\n) where {T<:AbstractFloat}\n\nStagger operation on arr by a 5th order polynomial interpolation,  shifting the variable half a grid point upwards in the z-direction\n\n\n\n\n\n","category":"method"},{"location":"#BifrostTools.zupxup-Tuple{Any, Vararg{Any}}","page":"Home","title":"BifrostTools.zupxup","text":"zupxup(data, args...)\n\nFor destagering variables at cell edges, in particular the y-axis.\n\n\n\n\n\n","category":"method"}]
}
