var documenterSearchIndex = {"docs":
[{"location":"usage/#Example-usage","page":"Example Usage","title":"Example usage","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"To load the package, type the following in the REPL","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"using BifrostTools","category":"page"},{"location":"usage/#Using-BifrostExperiment","page":"Example Usage","title":"Using BifrostExperiment","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"In this example, we look at the simulation cb24oi. we start with defining the part to the simulation directory and the name of the simulation.","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"expdir = \"/mn/stornext/d21/RoCS/matsc/3d/run/cb24oi/\"\nexpname = \"cb24oi\"","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"These variables can be passed to the BifrostExperiment structure, which creates an instance that lets us access the mesh file, snapshot numbers, and so on.","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"xp = BifrostExperiment(expname,expdir)\n\n# Mesh file that holds grid info etc.\nmesh = xp.mesh\n\nx = mesh.x\ny = mesh.y\nz = mesh.z\n\n# vector with snap numbers\nsnaps = xp.snaps","category":"page"},{"location":"usage/#Reading-data-from-the-simulation-with-get_var","page":"Example Usage","title":"Reading data from the simulation with get_var","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"Reading data from the snapshot or aux files is handled through the get_var function. Due to Julia's multiple dispatch functionality, there are several ways to call the get_var function, but we recommend using the following function to simplify the calling signature:","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"get_var(\n    xp::BifrostExperiment,\n    snap::Union{<:Integer, AbstractVector{<:Integer}},\n    variable::String,\n    args...\n    ;\n    kwargs...\n)","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"This funciton loads a variable from one or multiple snapshots of xp. If multiple snapshots are loaded, the variable is returned as a Vector of snapshots. The available variables are","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"The primary variables:","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"\"r\":  density\n\"px\": x-component of momentum\n\"py\": y-component of momentum\n\"pz\": z-component of momentum\n\"e\":  energy","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"if params[\"do_mhd\"] is true in the params file, we also have the magnetic field:","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"\"bx\": x-component of magnetic field\n\"by\": y-component of magnetic field\n\"bz\": z-component of magnetic field","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"and auxilliary variables (variables in params[\"aux\"]):","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"\"p\": pressure\n\"tg\": gas temperature\nQ terms","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"The following are optional keyword-arguments","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"units::String: Converts variables to \"si\" or \"cgs\" units. units=\"si\" or units=\"cgs\".\ndestagger::Bool: Performs 5th-order interpolation to center the variable, and should only be used when reading variables that are staggered, (e.g. velocity or magnetic field). The function uses the default direction (destaggeroperation) associated with the variable unless otherwise stated by the destaggeroperation keyword.\ndestaggeroperation::String: Determines which direction to destagger the variable. This is by default handled automatically by the destaggeroperation dictionary. \nrotate_about_x::String: Rotate coordinate system to the normal \"right hand system\" with z-axis pointing upwards by passing rotate_about=\"x\"\nslicex::AbstractVector{<:Integer}: Load a slice or slices in x-axis. Give e.g. slicex=[32, 410] or slicex=40:90\nslicey::AbstractVector{<:Integer}: Load a slice or slices in y-axis\nslicez::AbstractVector{<:Integer}: Load a slice or slices in z-axis\nsqueeze::Bool: Removes singleton dimensions (dimensions with length 1)","category":"page"},{"location":"usage/#Loading-a-single-snapshot","page":"Example Usage","title":"Loading a single snapshot","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"With xp as defined above, we define a snapshot that we want to investigate. When loading the full cube in code units, the variables are memory mapped, making them fast to load.","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"snap = 700\n# Load some quantities for the full cube in code units\npressure = get_var(xp, snap, \"p\")\ndensity = get_var(xp, snap, \"r\")\ntemperature = get_var(xp, snap, \"tg\")","category":"page"},{"location":"usage/#Converting-units","page":"Example Usage","title":"Converting units","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"If we want si or cgs units:","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"snap = 700\n# Load some quantities for the full cube in si or cgs units\npressure = get_var(xp, snap, \"p\", units=\"cgs\")\nrho = get_var(xp, snap, \"r\", units=\"si\")\n# The temperature is written in Kelvin from before\ntemperature = get_var(xp, snap, \"tg\")","category":"page"},{"location":"usage/#Reading-a-slice-of-the-full-cube","page":"Example Usage","title":"Reading a slice of the full cube","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"If we're only interested in a small part of the cube, we can use the slicing functionality of get_var. Use the squeeze keyword to drop singleton dimensions.","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"We can load only the surface","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"idz = argmin(abs.(mesh.z))\n\nrho = get_var(xp, snap, \"r\"; units=\"si\", slicez=[idz], squeeze=true)\ntemperature = get_var(xp, snap, \"tg\"; units=\"si\", slicez=[idz], squeeze=true)","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"or a smaller cube around the surface","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"rho = get_var(xp, snap, \"r\",\n     units=\"si\", slicex=100:200, slicey=400:500, slicez=[idz-20:idz+20])\ntemperature = get_var(xp, snap, \"tg\",\n     units=\"si\", slicex=100:200, slicey=400:500, slicez=[idz-20:idz+20])","category":"page"},{"location":"usage/#Interpolating-staggered-variables-to-the-grid-center","page":"Example Usage","title":"Interpolating staggered variables to the grid center","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"Interpolating staggered variables (destaggering) can be handled through get_var. This is recommended because get_var can determine the interpolation direction, and if you want to slice a variable, it takes care of the correct ordering of interpolating and slicing. ","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"# Read and destagger vertical momentum in si units\npz = get_var(xp, snap, \"pz\", units=\"si\", destagger=true)","category":"page"},{"location":"usage/#Reading-multiple-snapshots","page":"Example Usage","title":"Reading multiple snapshots","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"If you want the time evolution ","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"If you want to get the time evolution of a quantity, you can simply pass a vector of snapshots. The get_var function uses Julia's threads functionality to read multiple snapshots in parallel. ","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"snaps = 100:150\n\nrho = get_var(xp, snaps, \"r\", units=\"si\", slicez=[idz], squeeze=true)\n# Calculate vertical velocity\nvz = get_var(xp, snaps, \"pz\", units=\"si\", slicez=[idz], squeeze=true) ./ rho","category":"page"},{"location":"usage/#Rotating-grid","page":"Example Usage","title":"Rotating grid","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"Rotate about the x-axis to get vector quantities on a z-axis that points upwards.","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"# When we rotate about the x-axis, this is what happens to the grid\nz = -mesh.z\ny = -mesh.y\n\n# Load x-component of B-field and rotate about x-axis\nbx = get_var(xp, isnap, \"bx\", units=\"si\", destagger=true, rotate_about=\"x\")","category":"page"},{"location":"usage/#Loading-the-simulation-parameters-with-read_params","page":"Example Usage","title":"Loading the simulation parameters with read_params","text":"","category":"section"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"The read_params function reads the params file. It can be called by giving the full filename, like the following","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"snap = 500\nparams_file = joinpath(expdir,string(expname,\"_\",snap,\".idl\"))\nparams = read_params(params_file)","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"or","category":"page"},{"location":"usage/","page":"Example Usage","title":"Example Usage","text":"read_params(expname,snap,expdir)","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"BifrostTools.jl is not published yet, and therefore not available in the Julia registry. Therefore, this package need to be installed locally.","category":"page"},{"location":"install/#Recipe","page":"Installation","title":"Recipe","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Clone the repository locally: git clone git@github.com:ITA-Solar/BifrostTools.jl.git\nMove to the repo and open the REPL by typing julia in your terminal\n] add . installs the package from inside the repository (alternatively ] add PATH/TO/BifrostTools.jl)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Now you can use BifrostTools.jl in Julia! > using BifrostTools","category":"page"},{"location":"#BifrostTools.jl","page":"Home","title":"BifrostTools.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BifrostTools is a Julia package for working with Bifrost simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The goal of this package is to analyse Bifrost data faster than if you were to use python. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"BifrostTools lets you can load variables from single or multiple simulation snapshots, destaggers data automatically, and calculates derivatives. It is made to analyse data efficiently. ","category":"page"}]
}
